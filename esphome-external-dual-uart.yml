substitutions:
  name: core300debug
  upper_name: Core 300s Debug
  init: 'component_core300sUART::instance(id(uart_mcu2esp));'

esphome:
  name: core300debug
  platform: esp32
  board: nodemcu-32s
  includes:
    - esphome-external-dual-uart.h
  
logger:
  baud_rate: 115200

# Enable Home Assistant API
api:

ota:
  password: !secret esp_home_ota_pw

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  
  # Optional manual IP
  manual_ip:
    static_ip: 192.168.0.195
    gateway: 192.168.0.9
    subnet: 255.255.255.0

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  #ap:
  #  ssid: ${upper_name} Fallback Hotspot
  #  password: !secret esp_home_captive_pw

#captive_portal:

# Sync time with Home Assistant.
time:
  - platform: homeassistant
    id: homeassistant_time

uart:
  - id: uart_mcu2esp
    tx_pin: 
      number: GPIO21
      inverted: false
    rx_pin: 
      number: GPIO22
      inverted: false
    baud_rate: 115200
    debug:
      direction: BOTH
      after:
          timeout: 50ms
      sequence:
        - lambda:  UARTDebug::log_hex(direction, bytes, ':');        
        
custom_component:
  - lambda: |-
      auto c_core300_uart = ${init}
      return {c_core300_uart};

sensor:
  # Uptime sensor.
  - platform: uptime
    name: ${upper_name} Uptime

  # WiFi Signal sensor.
  - platform: wifi_signal
    name: ${upper_name} WiFi Signal
    update_interval: 60s

  - platform: custom
    lambda: |-
      auto c_core300_uart = ${init}
      return {
        c_core300_uart->sensor_pm25,
        c_core300_uart->sensor_roomSize
      };
    sensors:
      - name: ${upper_name} PM25
        accuracy_decimals: 0
        icon: mdi:air-filter
      - name: ${upper_name} Room Size
        accuracy_decimals: 0
        icon: mdi:axis-arrow
        entity_category: config
        
# Text sensors with general information.
text_sensor:
  # Expose WiFi information as sensors.
  - platform: wifi_info
    ip_address:
      name: ${upper_name} IP

  - platform: custom
    lambda: |-
        auto c_core300_uart = ${init}
        return {
          c_core300_uart->textsensor_fanSpeed,
          c_core300_uart->textsensor_Power,
          c_core300_uart->textsensor_FanMode,
          c_core300_uart->textsensor_DisplayLit,
          c_core300_uart->textsensor_DisplayLocked,
          c_core300_uart->textsensor_FanAutoMode, 
          c_core300_uart->textsensor_mcuFW
        };
           
    text_sensors:
        - name: ${upper_name} Fan Speed
          icon: mdi:fan
        - name: ${upper_name} Power
          icon: mdi:power
        - name: ${upper_name} FanMode
          icon: mdi:fan
        - name: ${upper_name} DisplayLit
          icon: mdi:lightbulb-on-50
        - name: ${upper_name} Display Locked
          icon: mdi:locked
        - name: ${upper_name} Fan Auto Mode
          icon: mdi:fan-auto
        - name: ${upper_name} FW
          icon: mdi:select-inverse
          entity_category:  diagnostic

button:
  #HA button to restart.
  - platform: restart
    name: ${upper_name} Restart
  - platform: template
    name: "Set Fan Manual High"
    on_press:
      lambda: |-
        auto c_core300_uart = ${init}
        c_core300_uart->set_fan_manual_high();
  - platform: template
    name: "Set Fan Manual Medium"
    on_press:
      lambda: |-
        auto c_core300_uart = ${init}
        c_core300_uart->set_fan_manual_medium();   
  - platform: template
    name: "Set Fan Manual Low"
    on_press:
      lambda: |-
        auto c_core300_uart = ${init}
        c_core300_uart->set_fan_manual_low();               